`timescale 1ns / 1ps


// Low level module to generate a clock with 3 seconds period
module clockCounter(input logic clk, output logic clk_out = 0);
    
    // Count number = 100MHz / 2 x desired frequency (Hz)
    // We need to count 15 x 10^7 times the clock edge, by starting the counter from 1, to have a 1/3 Hz frequency (3 seconds period)
    localparam division_value = 150000000; // 1/3 Hz
    
    logic [31:0] counter = 1; // 32 bit counter starting from 1 to go maximum of 15 x 10^7
    
    // Loop to generate our 3 secnds period clock
    always_ff@ (posedge clk) begin
        // If we reach the division value we toggle the output clock and reset the counter to start again
        if (counter == division_value) begin
            counter <= 1;
            clk_out <= ~clk_out;
        end
        
        // Increment the clock until reach the division value
        else
            counter <= counter + 1;      
    end
endmodule