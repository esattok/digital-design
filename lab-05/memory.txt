`timescale 1ns / 1ps

// Low level memory module that represents a 16x8 RAM
module memory(input logic clk, writeEnable, 
              input logic[3:0] writeAddress, readAddress1, readAddress2, 
              input logic [7:0] writeData, 
              output logic [7:0] readData1, readData2);

    logic [7:0] RAM[15:0]; // Instantiating the memory array as a RAM format
    
    // First assign all memory array values to 0 to avoud X values
    initial begin
        for (int i = 0; i <= 15; i++)
            RAM[i] = 0;
    end
    
    // Reading the data from both read ports
    assign readData1 = RAM[readAddress1];
    assign readData2 = RAM[readAddress2];
    
    // Writing the data when enabled at the clock edges
    always @(posedge clk) begin
        if (writeEnable)
            RAM[writeAddress] <= writeData;
    end
    
endmodule


// TestBench for the memory module
module memoryTB();
    
    // Local Signals
    logic clk, writeEnable;
    logic[3:0] writeAddress, readAddress1, readAddress2;
    logic [7:0] writeData, readData1, readData2;
    
    // Instantiating the device under test
    memory dut(clk, writeEnable, writeAddress, readAddress1, readAddress2, writeData, readData1, readData2);
    
    // Managing the clock
    always begin
        clk = 1; #5;
        clk = 0; #5;
    end
    
    // Testing the module according to the inputs
    initial begin
        writeEnable = 0; readAddress1 = 3; readAddress2 = 15; #10;
        writeEnable = 1; writeAddress = 5; writeData = 127; #10;
        writeEnable = 0; readAddress1 = 5; readAddress2 = 15; #10;
        writeEnable = 1; writeAddress = 15; writeData = 254; #10;
        writeEnable = 0; readAddress1 = 5; readAddress2 = 15; #10;
        writeEnable = 1; writeAddress = 14; writeData = 112; #10;
        writeEnable = 1; writeAddress = 13; writeData = 5; #10;
        writeEnable = 1; writeAddress = 6; writeData = 20; #10;
        writeEnable = 1; writeAddress = 5; writeData = 200; #10;
        writeEnable = 0; readAddress1 = 5; readAddress2 = 14; #10;
    end
    
    
endmodule







